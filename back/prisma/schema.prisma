generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum GroupStatus {
    PUBLIC
    PRIVATE
    PROTECT
}

enum UserStatus {
    ONLINE
    OFFLINE
    IN_GAME
    IN_QUEUE
}

model Friendship {
    id               Int      @id @default(autoincrement())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    followedBy       User     @relation("followedBy", fields: [followedById], references: [id])
    followedById     Int
    following        User     @relation("following", fields: [followingId], references: [id])
    followingId      Int
    friendshipStatus Int

    @@unique([followingId, followedById])
}

model Message {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    date     DateTime
    content  String
    sender   User     @relation(fields: [senderId], references: [id])
    senderId Int

    group   Group? @relation(fields: [groupId], references: [id])
    groupId Int?
}

model Group {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String      @unique
    type     GroupStatus
    password String?

    owner   User @relation("owner", fields: [ownerId], references: [id])
    ownerId Int

    members     GroupMembership[]
    admins      GroupAdmin[]
    Message     Message[]
    GroupInvite GroupInvite[]
    bans        Ban[]
    mutes       Mute[]
}

model GroupMembership {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id])
    userId Int

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int
}

model GroupAdmin {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id])
    userId Int

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email                   String   @unique
    user                    String   @unique
    nickname                String?  @unique
    hash                    String?
    userIntra               Boolean?
    jwt_token               String?
    authentication2fa       Boolean?
    authentication2faSecret String?
    profileImage            String?

    status UserStatus @default(OFFLINE)

    followedBy Friendship[] @relation("followedBy")
    following  Friendship[] @relation("following")
    ownedGroup Group[]      @relation("owner")

    Message         Message[]
    memberInGroups  GroupMembership[]
    adminInGroup    GroupAdmin[]
    invitesSent     GroupInvite[]     @relation("invitedByUser")
    invitesReceived GroupInvite[]     @relation("invitedUser")
    bans            Ban[]
    mute            Mute[]
    blockedUser     Block[]           @relation("user")
    userWhoBlocked  Block[]           @relation("blockedUser")
    gamesAsPlayer1  Game[]            @relation("player1")
    gamesAsPlayer2  Game[]            @relation("player2")

    @@index([user])
}

model GroupInvite {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int

    invitedUser     User @relation("invitedUser", fields: [invitedUserId], references: [id])
    invitedUserId   Int
    invitedByUser   User @relation("invitedByUser", fields: [invitedByUserId], references: [id])
    invitedByUserId Int
}

model Ban {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id])
    userId Int

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int

    expirationDate DateTime?

    @@unique([userId, groupId])
}

model Mute {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User  @relation(fields: [userId], references: [id])
    userId  Int
    group   Group @relation(fields: [groupId], references: [id])
    groupId Int

    expirationDate DateTime?

    @@unique([userId, groupId])
}

model Block {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user          User @relation("user", fields: [userId], references: [id])
    userId        Int
    blockedUser   User @relation("blockedUser", fields: [blockedUserId], references: [id])
    blockedUserId Int

    @@unique([userId, blockedUserId])
}

model Game {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    player1Name String
    player2Name String
    player1Id   Int
    player2Id   Int
    player1Won  Boolean
    player2Won  Boolean
    score1      Int
    score2      Int
    player1     User    @relation("player1", fields: [player1Id], references: [id])
    player2     User    @relation("player2", fields: [player2Id], references: [id])

    @@unique([id])
    @@index([player1Id])
    @@index([player2Id])
}
