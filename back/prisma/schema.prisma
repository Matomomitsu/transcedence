generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum GroupStatus {
    PUBLIC
    PRIVATE
    PROTECT
}

enum UserStatus {
    ONLINE
    OFFLINE
    IN_GAME
    IN_QUEUE
}

model Friendship {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    followedBy   User     @relation("followedBy", fields: [followedById], references: [id])
    followedById Int
    following    User     @relation("following", fields: [followingId], references: [id])
    followingId  Int

    @@unique([followingId, followedById])
}

model Message {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    date    DateTime
    content String

    sender   User @relation(fields: [senderId], references: [id])
    senderId Int

    group   Group? @relation(fields: [groupId], references: [id])
    groupId Int?
}

model Group {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String @unique
    type     GroupStatus
    password String?

    members GroupMembership[]
    admins  GroupAdmin[]
    Message Message[]
}

model GroupMembership {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id])
    userId Int

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int
}

model GroupAdmin {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id])
    userId Int

    group   Group @relation(fields: [groupId], references: [id])
    groupId Int
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email                   String   @unique
    user                    String   @unique
    hash                    String?
    userIntra               Boolean?
    jwt_token               String?
    authentication2fa       Boolean?
    authentication2faSecret String?

    status UserStatus?

    followedBy Friendship[] @relation("followedBy")
    following  Friendship[] @relation("following")

    Message        Message[]
    memberInGroups GroupMembership[]
    adminInGroup   GroupAdmin[]
}
